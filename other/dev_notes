Dev notes - Beta Version 


CLOUDFORMATION SETUP DOCUMENTATION

Need: Setup template (file)
Assumption: Has ESIP AWS account

Cloudformation > Stacks > Create stack > with new resources 
Specify template > upload template file

Enter a stack name 

Parameters: 

Create an AMI (or use one from a previous, deleted instance) 
DbInstanceType - db.r4.large
EC2ClientInstanceType - t3.micro
EC2SSHKeyPairName: ubd-beta.pem 
HTTPS: 0
SnapshotID: found under “Neptune, Snapshots”
Subnet1: subnet-5345e01e
Subnet2: subnet-ce7d68a9
VPCId: vpc-4a436230

Check acknowledgement at the end, then Create Stack.






Gremlin backup:

for line in reader:
        
         v1 = g.addV('application').property('topic', line['topic']).property('name', line['name']) \
               .property('site', line['site']).property('screenshot', line['screenshot']).property('publication', line['publication']).next()
         v2 = g.addV('dataset').property('doi', line['doi']).property('title', line['title']).next()
         g.V(Bindings.of('id',v1)).addE('uses').to(v2).iterate()

Clear graph: 
g.V().drop().iterate()

Add a vertex: g.addV('application').property('name', 'UMD Global Flood Monitoring System'). \ 
property('site', 'flood.umd.edu').next()



Add an edge: g.addE()
a = g.addV()....
b = g.addV()....
g.V(a).addE('uses').to(b).toList()

From documentation:
v1 = g.addV(‘person’).property(‘name’,‘marko’).next()
v2 = g.addV(‘person’).property(‘name’,‘stephen’).next()
g.V(Bindings.of(‘id’,v1)).addE(‘knows’).to(v2).property(‘weight’,0.75).iterate()

Print vertices with certain label:
print(g.V().hasLabel('application').name.toList())

Print edges/relationships with certain properties? 


.elementMap()
toList()
toSet()
next()
nextTraverser()
iterate()



# For filtering

# print(g.V().hasLabel('application').has('topic', 'floods').name.toList())
# print(g.V().hasLabel('application').name.toList())

# For displaying relevant information once a result is selected 

#querying for edges/relationships comes into play here




'''


from gremlin_python.process.anonymous_traversal import traversal
from gremlin_python.driver.driver_remote_connection import DriverRemoteConnection
 
g = traversal().withRemote(DriverRemoteConnection('ws://localhost:8182/gremlin','g'))
#g.addV("mission").property("name", "Mission").property("title", "Big Mission").next()
msg = 'Vertices count: ', g.V().count().next()
print(msg)

print(g.V().limit(2).toList())
'''

'''

# test loading a graph
def test_loadGraph():
   file="edges.csv"
   # make the local file accessible to the server
   path=os.path.abspath(file)
   # drop the existing content of the graph
   g.V().drop().iterate()
   # read the content from the air routes example
   g.io(path).read().iterate()
   vCount=g.V().count().next()
   print ("%s has %d vertices" % (file,vCount))
   #assert vCount==1

test_loadGraph()
'''










